{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AACA,MAAMA,EAAQC,GAEH,IAAIC,QAAQC,IACfC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACfjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC1BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAC7DhB,OAAAA,QAAQC,QAAQa,IAGtBX,EAASW,GAAgBT,QAAQY,MAAMH,GAY7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC1BnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACd,IAAIzB,QAAQ,CAACC,EAASyB,KACnB5B,MAAAA,EAAQoB,EAA0B,IAAK,KAE7ChB,WAAW,KACYmB,KAAKE,SAAW,GAG/BtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAI7B,MAAAA,IAE9B4B,EAAOD,EAAYE,KAExB7B,KAIL8B,EAAa,EAAGD,GAAAA,EAAI7B,MAAAA,MACxBO,QAAQC,mBAAmBqB,kBAAmB7B,QAG1C+B,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAa/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH;;ACjDT,aAHA,QAAA,oBACA,QAAA,iBACA,QAAA,iBACA,QAAA","file":"src.c440564c.js","sourceRoot":"../src","sourcesContent":["\nconst delay = ms => {\n  // Твой код\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,)\n    return  Promise.resolve(updatedUsers)\n    };\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\nimport \"./js/task1.js\";\nimport \"./js/task2.js\";\nimport './js/task3.js';\n\n\n\n"]}